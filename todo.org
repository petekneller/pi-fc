* TODO spi-to-tcp
** +v1: instead of looping constantly just add a thread sleep or other? And read > 1 byte?+
*** +extend =BidirectionalController= to transmit > 1 byte; further unit tests+
** +see what it looks like with fs2 (or cats-effect async stuff?)+
** move from byte-based to message-based transfers
*** nmea message parsing
**** +parse all messages to an 'unknown' type+
**** add checksum-ing
*** ublox message parsing
**** +parse all messages to an 'unknown' type+
**** add checksum-ing
*** +family polymorphism between Message and MessageParser? (return type of MessageParser)+
*** +add =toBytes= transformation as opposite of parsing+
*** basic SPI and message metrics
**** +SPI controller should expose metrics about general SPI usage; transfer req/s; transfer elapsed time; transfer sizes+
**** add metrics for message-specific devices; eg. I/O queue utilization, response size v buffer size
*** message-based API for bi-dir controller (not bytes) (distinct from the GPS-specific messages)(for =BidirectionalDeviceController= what =Device= is to =RegisterBasedDeviceController=)
*** refactor out a type for the ublox gps; add queue-based input/output? keep fs2 from non-fs2 impl
*** is 'parsing' the best term here? 'decoding'?
* a GPS device that extends =Device= and adds input/output queues and will in the future have methods for sending/polling common messages? does this agnostic to fs2 and there is another (fs2) device that provide the fs binding for the transfer thread
* jvm metrics: cpu usage; gc time? heap used
* =MessageParser.ParseState= doesn't prohibit =Unconsumed= in the middle of proceeding parser (which shouldn't be possible) - is it worth separating parse state into pre-proceeding and post-proceeding? :typesafety:
* metric statistical measures: what if you don't want all of the? how can a user specify which to calculate? an enum? but then how does that choice get bound into the returned value (case class)? maybe specify measures with an enum and return values in an hlist where each measure is a member of that hlist? :typesafety:
* TODO convert from SBT to MIll and refactor spidev tests -> integration tests
* DONE refactor device/api: move impls of rx and tx into device/controller, squash device/configuration, separate file and spi controllers
* DONE figure out how to remove the concept of 'register' from controllers, since uBlox GPS isn't register-based (is message-based)
** +remove the =Register= type member+
** +=SpiControllerTest= uses a =Device= impl whereas the =FileControllerTest= uses raw =Address=, =Controller=, =Rx=, =Tx= - change =SpiControllerTest= to be consistent+
** +=RcAddressTest= and =PwmAddressTest= work against the mock file api - move them up to using mock controllers?+
** +refine the types of =chip= and =channel= to be positive (and limited?) in =PwmAddress=+
* DONE rename Rx and Tx impls
** +StringRxTx+
** +File system Rx/Tx impls can now be case classes+
** +StringConfiguration+
** +ByteRxTx+
** +Spi Rx/Tx impls can now be case classes+
** +ByteConfiguration+
** +ByteRx should internally use BytesRx+
